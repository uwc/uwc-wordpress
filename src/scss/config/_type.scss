// ==== TYPOGRAPHY ==== //

// Define all global font styles here.

// 1. Variables
// 2. Lines
// 3. font()
// 4. Global styles


// 1. Variables //

$sans: "Source Sans Pro", Arial, sans-serif;
$sans-normal: 400;
$sans-medium: 600;
$sans-bold: 700;

$ms-base: 1rem;
$ms-ratio: 1.2;

$typi: (null: (16px, 1.75), m: 18px, l: 20px, xxl: 24px);

// 2. Lines //

@mixin line-header($color: white) {
  &::after {
    display: block;
    width: 2.5em;
    max-width: 80%;
    height: 0.15em;
    margin-top: 1rem;
    background-color: palette($color);
    content: "";
  }
}

@mixin line-link($bg-color: white, $bg-shade: base, $txt-color: $primary) {
  $selection-color: palette(blue, lighter);

  background-image: linear-gradient(palette($bg-color, $bg-shade), palette($bg-color, $bg-shade)), linear-gradient(palette($bg-color, $bg-shade), palette($bg-color, $bg-shade)), linear-gradient(palette($txt-color), palette($txt-color));
  background-repeat: no-repeat, no-repeat, repeat-x;
  background-position: 0% 100%, 100% 100%, 0% 100%;
  background-size: .05em 2px, .1em 2px, 1px 2px;
  color: palette($txt-color);
  text-shadow: .03em 0 palette($bg-color, $bg-shade), -.03em 0 palette($bg-color, $bg-shade), 0 .03em palette($bg-color, $bg-shade), 0 -.03em palette($bg-color, $bg-shade), .06em 0 palette($bg-color, $bg-shade), -.06em 0 palette($bg-color, $bg-shade), .09em 0 palette($bg-color, $bg-shade), -.09em 0 palette($bg-color, $bg-shade), .12em 0 palette($bg-color, $bg-shade), -.12em 0 palette($bg-color, $bg-shade), .15em 0 palette($bg-color, $bg-shade), -.15em 0 palette($bg-color, $bg-shade);

  &::selection {
    background: $selection-color;
    text-shadow: .03em 0 $selection-color, -.03em 0 $selection-color, 0 .03em $selection-color, 0 -.03em $selection-color, .06em 0 $selection-color, -.06em 0 $selection-color, .09em 0 $selection-color, -.09em 0 $selection-color, .12em 0 $selection-color, -.12em 0 $selection-color, .15em 0 $selection-color, -.15em 0 $selection-color;
  }

  &::before,
  &::after,
  *,
  *::before,
  *::after {
    text-shadow: none;
  }
}

@mixin link-underline($color: none) {
  position: relative;
  z-index: 1;
  color: palette($color);
  display: inline-block;
  cursor: pointer;
  transition: color $anim-s;

  &::after {
    position: absolute;
    bottom: 0;
    left: 0;
    width: 100%;
    height: 2px;
    transform: translate(0, 2px);
    transition: visibility $anim-s, opacity $anim-s, transform $anim-s;
    background-color: palette($color, light);
    content: "";
    opacity: 0;
    visibility: hidden;
    z-index: -1;
  }

  &:hover,
  &:focus {
    color: palette($color, light);
  }

  &:hover::after,
  &:focus::after {
    transform: translate(0, -2px);
    opacity: 1;
    visibility: visible;
  }
}

// 3. font() //

// The font() function accepts a style parameter.
// It is intended to promote consistency in the typography,
// therefore the number of styles should be kept to a minimum.
// Attributes which change between instances should not be defined here (e.g. color).
@mixin font($style: null) {
  @if $style == null {
    @warn "Mixin font() received no input! Please provide a style.";

    color: red;
    font-size: ms(10);
  }

  @else if $style == "title" {
    font-size: ms(6);
    font-weight: $sans-bold;
    line-height: 1.2;
    word-wrap: break-word;
  }

  @else if $style == "header-l" {
    font-size: ms(4);
    font-weight: $sans-bold;
    line-height: 1.2;
    word-wrap: break-word;
  }

  @else if $style == "header-m" {
    font-size: ms(3);
    font-weight: $sans-bold;
    line-height: 1.2;
    word-wrap: break-word;
  }

  @else if $style == "header-s" {
    font-size: ms(1);
    font-weight: $sans-bold;
    line-height: 1.2;
    word-wrap: break-word;
  }

  @else if $style == "body-l" {
    font-size: ms(1);
    font-weight: $sans-medium;
    word-wrap: break-word;
  }

  @else if $style == "body-m" {
    font-size: ms(0);
    word-wrap: break-word;
  }

  @else if $style == "body-s" {
    font-size: ms(-1);
    letter-spacing: 0.01em;
    word-wrap: break-word;
  }

  @else if $style == "button" {
    font-size: ms(0);
    font-weight: $sans-bold;
    letter-spacing: 0.04em;
    cursor: pointer;
    word-wrap: break-word;
  }

  @else {
    @warn "Mixin font() received invalid input! This style does not exist.";

    color: red;
    font-size: ms(10);
  }
}

// 4. Global styles //

// Update the foundational and global aspects of the page.

html {
  @include typi-base;

  word-wrap: break-word;
}

// Apply the primary font stack to the Pure grid units along with `html`, `button`, `input`, `select`, and `textarea`.
// Pure Grids use specific font stacks to ensure the greatest OS/browser compatibility.
html,
button,
input,
select,
textarea,
.pure-g [class *= "pure-u"] {
  font-family: $sans;
  font-weight: $sans-normal;
}

a {
  border: 0;
  color: inherit;
  text-decoration: none;
}

strong,
.strong {
  font-weight: $sans-bold;
}

dfn,
i,
em,
.em {
  font-style: italic;
}

code,
kbd,
tt,
var,
samp,
pre {
  font-family: 'Courier New', Courier, monospace;
}

pre {
  max-width: 100%;
  margin: 0 0 1.75em;
  padding: 1.75em;
  border: 1px solid palette(gray, light);
  font-size: ms(1);
  line-height: 1.3125;
  white-space: pre;
  overflow: auto;
  word-wrap: break-word;
}

code {
  padding: 0.125em 0.25em;
  background-color: palette(gray, light);
}

abbr,
acronym {
  border-bottom: 1px dotted palette(gray, light);
  cursor: help;
}

mark,
ins {
  padding: 0.125em 0.25em;
  background: palette(blue, light);
  color: palette(white);
  text-decoration: none;
}

big {
  font-size: 125%;
}

hr {
  height: 1px;
  margin: 0 0 2rem;
  border: 0;
  background-color: palette(gray, light);
}

cite {
  color: palette(gray);
  font-size: ms(0);

  &::before {
    content: "\2014\00a0";
  }
}

strong,
b {
  font-weight: $sans-bold;
}

del {
  opacity: 0.8;
}
